<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Brandon Vergara</title>
    <link>https://leovergara1.github.io/tags/java/</link>
    <description>Recent content in Java on Brandon Vergara</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://leovergara1.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Desplegar Aplicación Spring boot en Heroku (Gratis)</title>
      <link>https://leovergara1.github.io/post/deploy_spring_boot_heroku/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://leovergara1.github.io/post/deploy_spring_boot_heroku/</guid>
      <description>Lanzar Spring Boot Heroku
Requisitos
 Tener una aplicación básica en springBoot (https://start.spring.io/) Tener una cuenta de Heroku (https://www.heroku.com/) Tener git iniciado en el proyecto Por defecto Heroku usa JDK 1.8, si deseas cambiarlo revisa la siguiente info (https://devcenter.heroku.com/articles/java-support#specifying-a-java-version)  La ventaja de crear una aplicación en heroku es que ya contará con integración continua y de una manera gratuita y sencilla.
La verdad es que este es uno de los despliegues más fáciles del mundo jeje Y es que luego de tener nuestra aplicación en spring boot aplicaremos los siguientes pasos.</description>
    </item>
    
    <item>
      <title>Comparativa entre Ruby, Groovy y Java</title>
      <link>https://leovergara1.github.io/post/comparative_jvm_rb/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://leovergara1.github.io/post/comparative_jvm_rb/</guid>
      <description>Comparativa entre Ruby, Groovy y Java
La verdad es que esto empieza de una simple curiosidad, actualmente desarrollo un proyecto, en el cual he hecho uso de la concurrencia usando groovy con spring boot, con el paso del desarrollo el logrado mejorar los resultados sin embargo no me sentí satisfecho con ello en algunos casos, por ejemplo, logró trabajar 2.6 millones de datos en 5 minutos, sin embargo, si los datos son de un tamaño un poco mayor, el proceso haciende exponencialmente hasta las 2 horas para 1.</description>
    </item>
    
    <item>
      <title>Gpars Paralelismo con Groovy (Java)</title>
      <link>https://leovergara1.github.io/post/gpars/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://leovergara1.github.io/post/gpars/</guid>
      <description>&lt;p&gt;Una forma sencilla de manejar el paralelismo en groovy (Java)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartz Scheduler  con spring (Java)</title>
      <link>https://leovergara1.github.io/post/add_quartz_spring/</link>
      <pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://leovergara1.github.io/post/add_quartz_spring/</guid>
      <description>&lt;p&gt;Tarea que se ejecutan automáticamente en algún momento del día.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
